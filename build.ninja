builddir = obj

config = $
    -O1 -ggdb $
    -DTXT_DEBUG -DALG_DEBUG $
    -DINP_KEYS -DINP_TEXT -DINP_MOUSE
cflags = -fPIC -fdiagnostics-color=always
lflags = -shared
incl = -I . -I ext/include
libs = -L ext/lib -lglfw3 -lvulkan
corelibs = ERROR_PLATFORM_UNDEFINED

rule cc
    depfile = $out.d
    deps = gcc
    command = clang -MD -MF $out.d $
              $config $cflags $incl -c $in -o $out
rule ld
    command = clang $in $corelibs $libs $lflags -o $out
rule ar
    command = lib $in $libs /out:$out

build $builddir/lib.o: cc lib.c
build $builddir/inp.o: cc inp.c

build $builddir/lib_nopic.o: cc lib.c
    cflags =
build $builddir/inp_nopic.o: cc inp.c
    cflags =

build bin/libtxtquad.so: $
    ld $builddir/lib.o $builddir/inp.o
    corelibs = -ldl -lX11 -lm -lpthread
build so: phony bin/libtxtquad.so

build bin/libtxtquad.dylib: $
    ld $builddir/lib.o $builddir/inp.o
    corelibs = -framework Cocoa -framework IOKit
    lflags = -undefined dynamic_lookup -shared $
             -Wl,-install_name,@rpath/libtxtquad.dylib
build dylib: phony bin/libtxtquad.dylib

build bin/txtquad.lib: $
    ar $builddir/lib_nopic.o $builddir/inp_nopic.o
    corelibs =
    libs = ext/lib/glfw3.lib ext/lib/vulkan.lib
build lib: phony bin/txtquad.lib


sflags =

rule shc
    command = glslc $sflags $in -o $out
rule lde
    command = clang $in $libs -o $out

build assets/vert.spv: shc text.vert $
    | config.h
build assets/vert_compat.spv: shc text.vert $
    | config.h
    sflags = -DPLATFORM_COMPAT_VBO
build assets/frag.spv: shc text.frag

### DEMOS ###

demo = 4

build $builddir/demos.o: cc examples/demos.c
    config = -O0 -ggdb -DDEMO_$demo
build $builddir/demos_nopic.o: cc examples/demos.c
    config = -O0 -ggdb -DDEMO_$demo
    cflags =

build bin/demos: $
    lde $builddir/demos.o $
    | so assets/vert.spv assets/frag.spv
    libs = -L bin -ltxtquad -rpath bin -lm
build demos: phony bin/demos

build bin/demos.macos: $
    lde $builddir/demos.o $
    | dylib assets/vert_compat.spv assets/frag.spv
    libs = -L bin -ltxtquad -rpath bin
build demos.macos: phony bin/demos.macos

### CREDITS ###

credit = 5

build $builddir/credits.o: cc examples/credits.c
    config = -O0 -ggdb -DCREDIT_$credit
build $builddir/credits_nopic.o: cc examples/credits.c
    config = -O0 -ggdb -DCREDIT_$credit
    cflags =

build bin/credits: $
    lde $builddir/credits.o $
    | so assets/vert.spv assets/frag.spv
    libs = -L bin -ltxtquad -rpath bin -lm
build credits: phony bin/credits

build bin/credits.macos: $
    lde $builddir/credits.o $
    | dylib assets/vert_compat.spv assets/frag.spv
    libs = -L bin -ltxtquad -rpath bin
build credits.macos: phony bin/credits.macos
